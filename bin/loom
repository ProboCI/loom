#! /usr/bin/env node
'use strict';
var loom = require('..');

var path = require('path');
var util = require('util');
var Loader = require('yaml-config-loader');
var yargs = require('yargs');
var loader = new Loader({stopOnError: true});

loader.on('error', function(error) {
  if (error.name === 'YAMLException') {
    console.error({err: error}, util.print('Error parsing YAML file `', error.filePath, '`:', error.reason));
  }
  throw error;
});

var argv = yargs
  .describe('port', 'The port to listen on.')
  .alias('port', 'p')
  .describe('config', 'A YAML config file or directory of yaml files to load, can be invoked multiple times and later files will override earlier.')
  .alias('config', 'c')
  .describe('help', 'Display this help message.')
  .alias('help', 'h');

argv = yargs.argv;

if (argv.help) {
  yargs.showHelp();
  process.exit();
}

loader.addMapping({
  host: 'server.host',
  port: 'server.port',
  dbHost: 'db.host',
  dbPort: 'db.port',
  dbName: 'db.db',
  storageLogsTable: 'storage.logsTable',
  storageMetaTable: 'storage.metaTable',

  storageDataDir: 'storage.dataDir',
  storageTailTimeout: 'storage.tailTimeout',
  storageCompress: 'storage.compress',
});

var configKeys = [
  'server',
  'db',
  'storage',
  'tokens',
];

// When you use remapping, later mappings tend to replace the entire
// structure rather than overwriting the component key.
var loaderAddOptions = {
  deepMerge: configKeys,
};

loader.add(path.resolve(path.join(__dirname, '..', 'defaults.yaml')), loaderAddOptions);
loader.addAndNormalizeObject(process.env, 'camelCase', loaderAddOptions);

if (argv.c) {
  if (typeof argv.c === 'string') {
    argv.c = [argv.c];
  }
  for (let i in argv.c) {
    loader.add(path.resolve(argv.c[i]), loaderAddOptions);
  }
}

loader.addAndNormalizeObject(argv, 'camelCase', loaderAddOptions);

var cachedConfig = null;
module.exports = {
  load: function(cb) {
    if (cachedConfig) {
      if (typeof cb == 'function') {
        cb(null, cachedConfig);
      }
      return cachedConfig;
    }
    else {
      loader.load(function(err, config) {
        cachedConfig = config;
        cb(err, config);
      });
    }
  },
};

if (!module.parent) {
  loader.load(function(error, config) {
    if (error) throw error;
    loom.run(config);
  });
}
